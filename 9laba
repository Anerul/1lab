import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Крестики-нолики")

        window_width = 400
        window_height = 400
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        position_top = int(screen_height / 2 - window_height / 2)
        position_right = int(screen_width / 2 - window_width / 2)
        root.geometry(f'{window_width}x{window_height}+{position_right}+{position_top}')

        self.board = [' ' for _ in range(9)]
        self.current_player = "X"
        self.is_game_over = False
        self.game_mode = None

        self.buttons = [tk.Button(root, text=' ', font='Arial 30', width=5, height=2, command=lambda i=i: self.click(i))
                        for i in range(9)]
        for i, button in enumerate(self.buttons):
            button.grid(row=i // 3, column=i % 3)

        menu = tk.Menu(root)
        root.config(menu=menu)

        game_menu = tk.Menu(menu)
        menu.add_cascade(label="Игра", menu=game_menu)
        game_menu.add_command(label="Играть с компьютером", command=self.play_vs_computer)
        game_menu.add_command(label="Играть вдвоем", command=self.play_vs_human)
        game_menu.add_command(label="Выход", command=root.quit)

        first_move_menu = tk.Menu(menu)
        menu.add_cascade(label="Первый ход", menu=first_move_menu)
        first_move_menu.add_command(label="Вы", command=lambda: self.set_first_player('X'))
        first_move_menu.add_command(label="Компьютер", command=lambda: self.set_first_player('O'))

    def reset_game(self):
        self.board = [' ' for _ in range(9)]
        self.is_game_over = False
        self.current_player = "X"
        for button in self.buttons:
            button.config(text=' ', state=tk.NORMAL)

    def set_first_player(self, player):
        self.current_player = player
        if self.game_mode == "computer" and self.current_player == 'O':
            self.computer_move()

    def play_vs_computer(self):
        self.reset_game()
        self.game_mode = "computer"
        if self.current_player == 'O':
            self.computer_move()

    def play_vs_human(self):
        self.reset_game()
        self.game_mode = "human"

    def click(self, index):
        if self.board[index] == ' ' and not self.is_game_over:
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)

            if self.check_winner(self.current_player):
                messagebox.showinfo("Игра окончена", f"Победитель: {self.current_player}")
                self.is_game_over = True
                self.reset_game()  # Перезапуск игры после победы
            elif ' ' not in self.board:
                messagebox.showinfo("Игра окончена", "Ничья!")
                self.is_game_over = True
                self.reset_game()  # Перезапуск игры после ничьей
            else:
                self.current_player = 'O' if self.current_player == 'X' else 'X'
                if self.game_mode == "computer" and self.current_player == 'O':
                    self.computer_move()

    def computer_move(self):
        best_move = self.minimax(self.board, 'O')['index']
        self.board[best_move] = 'O'
        self.buttons[best_move].config(text='O')

        if self.check_winner('O'):
            messagebox.showinfo("Игра окончена", "Победитель: Компьютер")
            self.is_game_over = True
            self.reset_game()  # Перезапуск игры после победы компьютера
        elif ' ' not in self.board:
            messagebox.showinfo("Игра окончена", "Ничья!")
            self.is_game_over = True
            self.reset_game()  # Перезапуск игры после ничьей
        else:
            self.current_player = 'X'

    def minimax(self, board, player):
        opponent = 'X' if player == 'O' else 'O'

        if self.check_winner('O'):
            return {'score': 1}
        elif self.check_winner('X'):
            return {'score': -1}
        elif ' ' not in board:
            return {'score': 0}

        moves = []
        for i in range(9):
            if board[i] == ' ':
                move = {'index': i}
                board[i] = player
                result = self.minimax(board, opponent)
                move['score'] = result['score']
                board[i] = ' '
                moves.append(move)

        if player == 'O':
            best_move = max(moves, key=lambda x: x['score'])
        else:
            best_move = min(moves, key=lambda x: x['score'])
        return best_move

    def check_winner(self, player):
        win_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  
            [0, 4, 8], [2, 4, 6]              
        ]
        return any(all(self.board[i] == player for i in combo) for combo in win_combinations)

root = tk.Tk()
game = TicTacToe(root)
root.mainloop()
