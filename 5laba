'''
Задана рекуррентная функция. Область определения функции – натуральные числа.
Написать программу сравнительного вычисления данной функции рекурсивно и итерационно.
Определить границы применимости рекурсивного и итерационного подхода.
Результаты сравнительного исследования времени вычисления представить в табличной и графической форме.
9. F(1) = 1,F(n) = (-1)n*(F(n–1)+ (n + 1)! /(2n)!), при n > 1
'''
import timeit
import matplotlib.pyplot as plt

factorial_cache = {0: 1, 1: 1}

def dynamic_factorial(n):
    if n not in factorial_cache:
        factorial_cache[n] = n * dynamic_factorial(n-1)
    return factorial_cache[n]

def recursive_F(n):
    if n == 1:
        return 1
    else:
        sign = -1
        result = 0
        for i in range(n, 0, -1):
            result += sign * dynamic_factorial(i+1) / dynamic_factorial(2*i)
            sign *= -1
        return result

def iterative_F(n):
    result = 1
    sign = -1
    for i in range(2, n+1):
        result += sign * (dynamic_factorial(i+1) / dynamic_factorial(2*i))
        sign *= -1
    return result

def dynamic_F(n, cache={1: 1}):
    if n in cache:
        return cache[n]
    else:
        sign = -1
        result = 0
        for i in range(n, 0, -1):
            result += sign * dynamic_F(i-1, cache) + dynamic_factorial(i+1) / dynamic_factorial(2*i)
            sign *= -1
        cache[n] = result
        return result

def score_time(func, n):
    return timeit.timeit(lambda: func(n), number=1000)

n_values = range(1, 10)
recursive_times = []
iterative_times = []
dynamic_times = []

for n in n_values:
    recursive_times.append(score_time(recursive_F, n))
    iterative_times.append(score_time(iterative_F, n))
    dynamic_times.append(score_time(dynamic_F, n))

print(f"{'n':<10}{'Рекурсивное время (мс)':<25}{'Итерационное время (мс)':<25}{'Динамическое время (мс)':<25}")
for i, n in enumerate(n_values):
    print(f"{n:<10}{recursive_times[i]:<25}{iterative_times[i]:<25}{dynamic_times[i]:<25}")

plt.plot(n_values, recursive_times, label='Рекурсивно')
plt.plot(n_values, iterative_times, label='Итерационно')
plt.plot(n_values, dynamic_times, label='Динамическое')
plt.xlabel('n')
plt.ylabel('Время (в миллисекундах)')
plt.legend()
plt.title('Сравнение времени вычисления функции F(n)')
plt.show()
