#С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц, B,C,D,E
#заполняется случайным образом целыми числами в интервале [-10,10]. Для тестирования использовать не случайное заполнение, а целенаправленное.
#Для ИСТд-11 вид матрицы А					
#B	C
#D	E
#Для ИСТд-11:
#  2
#1   3
#  4
#Формируется матрица F следующим образом: если в В количество строк, состоящих из одних нулей в четных столбцах в области 2 больше, чем сумма положительных 
#элементов в четных строках в области 4,
#то поменять в С симметрично области 1 и 2 местами, иначе С и Е поменять местами несимметрично. 
#При этом матрица А не меняется. После чего вычисляется выражение: ((К*F)*А– (K * AT) . Выводятся по мере формирования А, F и все матричные операции последовательно.
def transpose(matrix):
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]
def matrix_multiply(A, B):
    result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]
    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                result[i][j] += A[i][k] * B[k][j]
    return result
def generate_matrix(N):
    from random import randint
    return [[randint(-10, 10) for _ in range(N)] for _ in range(N)]
def compute_expression(K, F, A):
    KF = matrix_multiply([[K * x for x in row] for row in F], A)
    KA_T = matrix_multiply([[K * x for x in row] for row in transpose(A)], A)
    return [[KF[i][j] - KA_T[i][j] for j in range(len(A))] for i in range(len(A))]
K = int(input("Введите K: "))
N = int(input("Введите N: "))
A = generate_matrix(N)
s1 = sum(A[i][j] for i in range(N) for j in range(i))
s2 = sum(A[i][j] for i in range(N) for j in range(i + 1, N))
s3 = sum(A[i][j] for i in range(N//2) for j in range(i + 1)) + \
     sum(A[i][j] for i in range(N//2, N) for j in range(N - i, N))
F = [[0] * N for _ in range(N)]
for i in range(N):
    for j in range(N):
        if i >= j:
            F[i][j] = s1
        else:
            F[i][j] = s2
result = compute_expression(K, F, A)
print("Матрица A:")
for row in A:
    print(' '.join(map(str, row)))
print("Матрица F:")
for row in F:
    print(' '.join(map(str, row)))
print("Результат выражения ((К*F)*А – (K * A^T):")
for row in result:
    print(' '.join(map(str, row)))
